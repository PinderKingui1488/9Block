name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.0
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_NAME: test_db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        TEST_ENV: true
      run: |
        python manage.py migrate

    - name: Run tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_NAME: test_db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        TEST_ENV: true
      run: |
        python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Generate SECRET_KEY
      run: |
        echo "SECRET_KEY=$(python -c 'import secrets; print(secrets.token_urlsafe(50))')" >> $GITHUB_ENV

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} echo "SSH connection successful"

    - name: Copy project files to server
      run: |
        rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Create .env file on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          echo "SECRET_KEY=${{ env.SECRET_KEY }}" > .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=158.160.87.62,localhost" >> .env
          echo "POSTGRES_DB=drf" >> .env
          echo "POSTGRES_USER=drf_user" >> .env
          echo "POSTGRES_PASSWORD=drf_password" >> .env
          echo "POSTGRES_HOST=db" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "REDIS_PASSWORD=default_redis_pass" >> .env
          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        EOF